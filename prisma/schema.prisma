// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(20)
  class_name  String
  level       Int       @default(1)
  exp         Int       @default(0)
  hp          Int
  mp          Int
  p_atk       Int
  m_atk       Int
  instance_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  deleted_at  DateTime?

  Class       Class         @relation(fields: [class_name], references: [name])
  OwnedSpells PlayerSpell[]
  Instance    Instance      @relation(fields: [instance_id], references: [id])

  @@map("players")
}

model Class {
  id             Int    @id @unique
  name           String @unique
  rank           Int
  required_class Int?
  required_level Int
  base_hp        Int
  hp_lv          Int
  base_mp        Int
  mp_lv          Int
  base_p_atk     Int
  p_atk_lv       Int
  base_m_atk     Int
  m_atk_lv       Int

  Players Player[]
  Spells  Spell[]

  @@map("classes")
}

model Spell {
  id             Int         @id @default(autoincrement())
  name           String      @unique
  type           SpellType
  target         SpellTarget
  target_number  Int
  required_class Int?
  required_level Int
  hp_cost        Int
  mp_cost        Int
  cooldown       Int
  base_p_atk     Float
  p_atk_lv       Int
  base_m_atk     Float
  m_atk_lv       Int
  buy_price      Int

  Classes      Class?        @relation(fields: [required_class], references: [id])
  PlayerSpells PlayerSpell[]

  @@map("spells")
}

model Country {
  id   Int    @id @default(autoincrement())
  name String

  Territory Territory[]

  @@map("countries")
}

model Territory {
  id         Int    @id @default(autoincrement())
  country_id Int?
  biome      Biome
  name       String

  Country  Country?   @relation(fields: [country_id], references: [id])
  Instance Instance[]

  @@map("territories")
}

model Instance {
  id           Int          @id @default(autoincrement())
  territory_id Int
  type         InstanceType
  floor        String       @db.VarChar(2)
  name         String

  Connections Connection[] @relation("Origin")
  ConnectedTo Connection[] @relation("Destination")
  Territory   Territory    @relation(fields: [territory_id], references: [id])
  Player      Player[]

  @@map("instances")
}

model Connection {
  id                Int     @id @default(autoincrement())
  origin_id         Int
  destination_id    Int
  required_quest_id Int?
  required_key_id   Int?
  required_item_id  Int?
  locked            Boolean @default(false)

  Origin      Instance @relation(name: "Origin", fields: [origin_id], references: [id])
  Destination Instance @relation(name: "Destination", fields: [destination_id], references: [id])

  @@map("connections")
}

model ExperienceTable {
  level        Int @id
  exp_required Int

  @@map("experience_table")
}

model PlayerSpell {
  player_id Int
  spell_id  Int

  Player Player @relation(fields: [player_id], references: [id])
  Spell  Spell  @relation(fields: [spell_id], references: [id])

  @@id([player_id, spell_id])
  @@map("player_spells")
}

enum SpellType {
  Offense
  Support
  Buff
  Debuff
}

enum SpellTarget {
  Ally
  Enemy
}

enum Biome {
  Forest
  Desert
  Tundra
  Grassland
  Mountain
  Swamp
  Urban
  Coastal
  Jungle
  Savanna
  Volcanic
  Ice
  Ocean
}

enum InstanceType {
  City
  Building
  Field
  Dungeon
}
